

class MatchMakingService {
    constructor() {
		this.rooms = [];
    }
	/* just information what room should contain
		{
		"matchType": "1v1",
		"players": 
			[
				{
				"nick": "luca",
				"status": "accepted"
				},
				{
				"nick": "yen",
				"status": "pending"
				}
			],
		"timeoutAt": "timestamp + 30 seconds"
		}
	 */


		
	/*
	ðŸ‘‰ async createRoom() {
		insert needed info into new room object
		push it into this.rooms;
	ðŸ‘‰ use setTimeout function with a promise to 
		destroyRoom if fulfilled
	}
	*/

	/* 
	ðŸ‘‰ async destroyRoom() {
		check if all players have accepted
		if not send message to all players informing them
		then destroy
		}
	 */

	/* 
	ðŸ‘‰ async matchMakingAcceptInvitation() {
		set status to accepted for player
		check if all accepted
			if yes, then startMatch()
		}
	*/

	/* 
	ðŸ‘‰	async startMatch() {}
	*/


	async matchMakingInit(connection, message) {
		if (this.rooms)
		{
			console.log("room exists :)");
			/*
			ðŸ‘‰	iterate through all the rooms to confirm 
				that none of the requested players in message.players
				have ACCEPTED other rooms already
			ðŸ‘‰	if someone already occupied, send FAILURE to connection
				and exit the matchmaking
			*/
			
			// for (let room of this.rooms) {
			// 	if 
			// }
		}

		/*ðŸ‘‰ createRoom(); */

		/* 
		Promise.race([matchInvitationTimeout, matchInvitationAccepted]).then((result) => {
			console.log(result);
			});
			*/

		/*ðŸ‘‰ send invitations to players 
			except connection (the one who invited) and AI opponents*/
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><> */
}

export default MatchMakingService;